**********************************************************************************


                        TypeScript


**********************************************************************************

playgound: https://www.typescriptlang.org/play/index.html

compiling: $ tsc script.ts, will, by default, create script.js in the same directory



Types 
--------------------------------

In addition to all the regular es6 types, TypeScript also includes tuples, enums and any.


Tuples

In TS tuples are arrays with mixed types and a limited number of items. 

For example I might have a normal array for my address:

    let address = [145, "Good Street"];

The compiler will treat this as an array of type 'any'. I.e. :

    let address: any[] = [145, "Good Street"];

However, to make it a tuple we can declare like this:

    let address: [number, string] = [145, "Good Street"];

Then if we re assigned with the number and string reversed we would get an error:

    address = ["Good Street", 145];  // TS error


Enums

Enums make numbers more expressive by encoding numbers into user friendly forms. 

    enum Color {
        Grey,  // 0
        Green,  // 1
        Blue    // 2
    }

    let myColor: Color = Color.Green;
    console.log(myColor); // 1
    
You can also assign specific numbers to enum values.


any

This type gives up all the features and advantages of TypeScript. So tt should only be used sparingly. 

    let car: any = "BMW";  // any allows us to change to a different type
    console.log(car);
    car = { brand: "BMW", series: 3};  // change to object
    console.log(car);



nullable types

For example we might want the flexibiliy to clear a value:

    let canBeNull = 12;
    // later on
    canBeBull = null;

You can configure TS so that you can define which variables should never be null and which variables can be null.

Within tsconfig.json add the following into compiler options (this is false by default).

    "strictNullChecks": true

The above code snippit would now produce an error: type 'null' is not assignable to type 'number'. However, if you first declare the variable and then assign null no error will appear:

    let canAlsoBeNull;
    canAlsoBeNull = null; // no error


To make the first example work we would have to specifiy null within a union type:

    let canBeNull: number | null = 12;
    canBeBull = null;

Also note that if you first assign null to a variable, TS will not automatically widen the set of allowed types beyond null. 

    let canBeAny =  null;
    canBeAny = 12 // error: type 'number' is not assignable to type 'null'.




Functions
--------------------------------------------

Functions that return nothing use 'void'.

    function sayHello(): void {
        console.log("hello!");
    }

Functions are types on their own. 

    function multiply(value1: number, value2: number): number {
        return value1 * value2;
    }

    let myMultiply: (val1: number, val2: number) => number;
    myMultiply = multiply;
    console.log(myMultiply(5,2));


There is a difference between function that ruturn nothing (void) and those that will never return anthing. In the latter case the inferred return type is 'never'.

    function neverReturns(): never {
        throw new Error('An error');  // always stops and throws an error so never returns anything.
    }

We can combine tuples and the rest operator. These two functions are equivalent:

    function printInfo(name: string, age: number) {
        console.log('My name is ' + name + ' and I am ' + age + ' years old!');
    }

    function printInfo(...info: [string, number]) {
        console.log('My name is ' + info[0] + ' and I am ' + info[1] + ' years old!');
    }





Objects
-----------------------------------------

Object will be automatically turned into a type. However it is not just the type of each value is important but also property names.

    let userData = {
        name: "max",
        age: 27
    }

    userData = {}  // error: type {} is not assignable to type {name: string, age: number}

    userData = {
        a: "hello",
        b: 22
    }  // error: 'a' does not exist in type {name: string, age: number}


This is unlike the function case where only the order of the types of the argument values are important. In an object the order is not clear, so the property names step up and provide an indication of structure.

Explicitly providing the type definition:

    userData: {name: string, age: number} = {
        a: "hello",
        b: 22
    }


A 'type alias' is something we assign a type to so that we can resuse it as a custom type.

type Complex = {data: number[], output: (all:boolean) => number[]}

The type keyword tells the TS compiler to create a type and assign to the type alias.



Union Types
------------------------------------------

For flexibily we can use a single pipe operator.



Compiler

--------------------------------------------

The default behaviour of the compiler is to warn but then go on and transpile to JS.

running $ tsc --init creates a tsconfig.file. Inside this file you'll see various options.

    modules -  the format you with wish to resolve your modules
    target - the target version of JS, eg es6. es5 is the default because it runs in more browsers.



Anyway, to stop trasnpiation on an error use this option:

    "noEmitOnError": true,


If the sourceMap option is true the compiler will make a .map file next to the .js file. This allows the associated ts file to be used in the dev tools, including denugging with break points.

    "sourceMap": true

If you set noImplicitAny to true then you wont get away with loose variable declarations:

    let anything; // error: variable 'anything' implicitily has an 'any' type.


You can also chain compiler options into your tsc call with double hyphen

    $ tsc --noImplicitAny

You might also consider noUnusedParameters and strictNullChecks to write cleaner code. noUnusedParameters will not allow you to specify parameter for a function that are not used. strictNullChecks will not allow you to return a value that has only been declared and not initialised. For example you might not have considered all branches in a function.

    function controlMe(isTrue: boolean) {
        let result: number;
        if (isTrue) {
            resuult = 12;
        }
        return result; // strictNullChecks will complain about this undefined value being return.
    }




Classes
---------------------------------------

In TS you can create class properties just by listing them out in teh class body. You don't need to put them in a constructor with the 'this' keyword.

class Person {

    name: string  // the default accessibility is public i.e. this is 'public name: string'
    private type: string; 
    protected age: number ; // not public but accessible from classes that inherit from this class (child classes)

    // if you do need to assign some arguments to properties then use the constructor
    // the 2nd argument here is shortcut way of creating a property
    contructor(name: string, public userName: string) {
        this.name = name; // this.name is the property and name (RHS) is the argument passed in
    }

    // using methods to access to private properties
    printAge() {
        console.log(this.age);
    }
    setType(type: string) {
        this.type = type;
        console.log(this.type);
    }

}

Class are used by instantiating them, which creates an object. 

    const person = new Person('Max', 'max');

Use the extends keyword to inherit from a class (In the past we would have used object.create() to use one object as the prototype of another).

    class Max extends Person {
        name = "Max";
    }

    const person = new Person('Anna', 'max'); // need both arguments to satisfy the constructor in the parent class
    console.log(person.name);  // Max - the name we supplied in the child overrides the parent's property

While this case show's a property override, the normal case is to call the parent's constructor with super:

    class Max extends Person {
        
        constructor(userName: string) {
            super('Max', userName);
            this.age = 31; 
        }
    }

You can also make methods private and public.

// getters and setters

These allow you to run some code before getting or setting a value.

Let's say we want to set a species but it must have at least three characters.

    class Plant {
        private _species: string = "default";

        get species() {
            return this._species;
        }

        set species(value: string) {
            if(value.length > 3) {
                this._species = value;
            } else {
                this.species = "default";
            }
        }
    }

In the past setter and getters would have looked like this:

    var person = {
        _firstName: ""
    };
    Object.defineProperty(person, "firstName", {
        get: function () {
            return this._firstName;
        },
        set: function (value) {
            if (value.length > 3) {
                this._firstName = value;
            }
            else {
                this._firstName = "";
            }
        },
        enumerable: true,
        configurable: true
    });



Static Properties and methods

    class Helpers {
        static PI: number = 3.14;

        static calcCircumference( diameter: number): number {
            return this.PI * diameter;
        }
    }

    // now works without the instantiation of an object from the class 
    console.log(2 * Helpers.PI);
    console.log(Helpers.calcCircumference(8));


Abstract Classes

Abstract classes cannot be instantiated directly. You must always inherit from them. This may be useful when you need a class to provide a basic set up for other classes to inherit from, but is too basic to be used on it's own.

You can also create abstract methods. These do not have curly braces, aka a function body. 

    abstract class Project {
        projectName: string = "default";
        budget: number = 1000;

        // once you extend this class you are required to implement this method
        abstract changeName(name: string): void;

        calcBudget() {
            return this.budget * 2;
        }
    }


Private Constructors and Singletons

class OnlyOne {
    // static yet private
    private static instance: OnlyOne;
    
    // private constructor: can't instantiate from outside the class declaration
    private constructor(public name: string) {}
    
    static getInstance() {
        if(!OnlyOne.instance) {
            OnlyOne.instance = new OnlyOne('The Only One');
        }
        return OnlyOne.instance;
    }
}

// Error: Constructor of class 'OnlyOne' is private and only accessible within the class declaration.
//let wrong = new OnlyOne('The Only One');

// Checks if we have an instance. If not, this creates an instance.
let right = OnlyOne.getInstance();
console.log(right);  // Object { name: "The Only One" }
right = OnlyOne.getInstance();
console.log(right); // Object { name: "The Only One" }



Readonly properties

In the above example we could still change the property 'name'. 

    right.name = "something else";

If you only supply a getter and not a setter, then the property is read only. A short cut is to specify the 'readonly' keyword in the property declaration. 

    private constructor(public readonly name: string) {}



Namespaces and Modules
------------------------------------------

In more complicated projects we need to break up our files. TS supports modular code with tow key concepts; namespaces and modules. 

Namespaces allow us to group related code, and also avoid the duplication of names (naming collisions). They look a little like a JS object. Here we group some math-related code together, and in doing so pull it out of the global scope (less global scope pollution).

    namespace MyMath {
        const PI = 3.142;
        
        export function calcCirc(diam: number): number {
            return diam * PI;
        }

        export function calcRecArea(width: number, height: number): number {
            return width * height;
        }
    }

    const PI = 3.1419; // no redeclaration error
    console.log(MyMath.calcRecArea(10,20));



